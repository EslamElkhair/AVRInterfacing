
AVRInterfacing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000001a4  00000218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000021a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000024c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000762  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000642  00000000  00000000  00000a42  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e0  00000000  00000000  00001084  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000048  00000000  00000000  00001364  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039f  00000000  00000000  000013ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000013b  00000000  00000000  0000174b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001886  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ea       	ldi	r30, 0xA4	; 164
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include "SevenSegment_Core.h"
#include "PORT_CORE.h"

int main(void)
{
	PORT_Init();
  82:	0e 94 45 00 	call	0x8a	; 0x8a <PORT_Init>
    /* Replace with your application code */
    while (1) 
    {
		SET_BIT(PORTC,1);
  86:	a9 9a       	sbi	0x15, 1	; 21
  88:	fe cf       	rjmp	.-4      	; 0x86 <main+0x4>

0000008a <PORT_Init>:
void PORT_Init(void)
{
	uint8 Cnt = 0 , Port = 0, PIN = 0 , DIR = 0;
	for(Cnt = 0;Cnt<DEFINED_PINS;Cnt++)
	{
		Port = PORT_Intialization[Cnt].PIN_NUM / NUMBER_OF_PORT_PINS;
  8a:	e0 e6       	ldi	r30, 0x60	; 96
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	80 81       	ld	r24, Z
  90:	98 2f       	mov	r25, r24
  92:	96 95       	lsr	r25
  94:	96 95       	lsr	r25
  96:	96 95       	lsr	r25
		PIN  = PORT_Intialization[Cnt].PIN_NUM % NUMBER_OF_PORT_PINS;
  98:	87 70       	andi	r24, 0x07	; 7
		DIR  = PORT_Intialization[Cnt].DIR;
		
		switch (DIR)
  9a:	21 81       	ldd	r18, Z+1	; 0x01
  9c:	22 23       	and	r18, r18
  9e:	09 f4       	brne	.+2      	; 0xa2 <PORT_Init+0x18>
  a0:	3f c0       	rjmp	.+126    	; 0x120 <PORT_Init+0x96>
  a2:	21 30       	cpi	r18, 0x01	; 1
  a4:	09 f0       	breq	.+2      	; 0xa8 <PORT_Init+0x1e>
  a6:	7b c0       	rjmp	.+246    	; 0x19e <PORT_Init+0x114>
		{
			case PIN_DIRECTION_OUTPUT :
			switch(Port)
  a8:	91 30       	cpi	r25, 0x01	; 1
  aa:	99 f0       	breq	.+38     	; 0xd2 <PORT_Init+0x48>
  ac:	28 f0       	brcs	.+10     	; 0xb8 <PORT_Init+0x2e>
  ae:	92 30       	cpi	r25, 0x02	; 2
  b0:	e9 f0       	breq	.+58     	; 0xec <PORT_Init+0x62>
  b2:	93 30       	cpi	r25, 0x03	; 3
  b4:	41 f1       	breq	.+80     	; 0x106 <PORT_Init+0x7c>
  b6:	08 95       	ret
			{
				case PORTAa:
				SET_BIT(DDRA, PIN);
  b8:	4a b3       	in	r20, 0x1a	; 26
  ba:	21 e0       	ldi	r18, 0x01	; 1
  bc:	30 e0       	ldi	r19, 0x00	; 0
  be:	b9 01       	movw	r22, r18
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <PORT_Init+0x3c>
  c2:	66 0f       	add	r22, r22
  c4:	77 1f       	adc	r23, r23
  c6:	8a 95       	dec	r24
  c8:	e2 f7       	brpl	.-8      	; 0xc2 <PORT_Init+0x38>
  ca:	cb 01       	movw	r24, r22
  cc:	84 2b       	or	r24, r20
  ce:	8a bb       	out	0x1a, r24	; 26
				break;
  d0:	08 95       	ret
				
				case PORTBb:
				SET_BIT(DDRB, PIN);
  d2:	47 b3       	in	r20, 0x17	; 23
  d4:	21 e0       	ldi	r18, 0x01	; 1
  d6:	30 e0       	ldi	r19, 0x00	; 0
  d8:	b9 01       	movw	r22, r18
  da:	02 c0       	rjmp	.+4      	; 0xe0 <PORT_Init+0x56>
  dc:	66 0f       	add	r22, r22
  de:	77 1f       	adc	r23, r23
  e0:	8a 95       	dec	r24
  e2:	e2 f7       	brpl	.-8      	; 0xdc <PORT_Init+0x52>
  e4:	cb 01       	movw	r24, r22
  e6:	84 2b       	or	r24, r20
  e8:	87 bb       	out	0x17, r24	; 23
				break;
  ea:	08 95       	ret
				
				case PORTCc:
				SET_BIT(DDRC, PIN);
  ec:	44 b3       	in	r20, 0x14	; 20
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	b9 01       	movw	r22, r18
  f4:	02 c0       	rjmp	.+4      	; 0xfa <PORT_Init+0x70>
  f6:	66 0f       	add	r22, r22
  f8:	77 1f       	adc	r23, r23
  fa:	8a 95       	dec	r24
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <PORT_Init+0x6c>
  fe:	cb 01       	movw	r24, r22
 100:	84 2b       	or	r24, r20
 102:	84 bb       	out	0x14, r24	; 20
				break;
 104:	08 95       	ret
				case PORTDd:
				SET_BIT(DDRD, PIN);
 106:	41 b3       	in	r20, 0x11	; 17
 108:	21 e0       	ldi	r18, 0x01	; 1
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	b9 01       	movw	r22, r18
 10e:	02 c0       	rjmp	.+4      	; 0x114 <PORT_Init+0x8a>
 110:	66 0f       	add	r22, r22
 112:	77 1f       	adc	r23, r23
 114:	8a 95       	dec	r24
 116:	e2 f7       	brpl	.-8      	; 0x110 <PORT_Init+0x86>
 118:	cb 01       	movw	r24, r22
 11a:	84 2b       	or	r24, r20
 11c:	81 bb       	out	0x11, r24	; 17
				break;
 11e:	08 95       	ret
			}
			
			break;
			
			case PIN_DIRECTION_INPUT :
			switch(Port)
 120:	91 30       	cpi	r25, 0x01	; 1
 122:	a1 f0       	breq	.+40     	; 0x14c <PORT_Init+0xc2>
 124:	28 f0       	brcs	.+10     	; 0x130 <PORT_Init+0xa6>
 126:	92 30       	cpi	r25, 0x02	; 2
 128:	f9 f0       	breq	.+62     	; 0x168 <PORT_Init+0xde>
 12a:	93 30       	cpi	r25, 0x03	; 3
 12c:	59 f1       	breq	.+86     	; 0x184 <PORT_Init+0xfa>
 12e:	08 95       	ret
			{
				case PORTAa:
				CLR_BIT(DDRA, PIN);
 130:	4a b3       	in	r20, 0x1a	; 26
 132:	21 e0       	ldi	r18, 0x01	; 1
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	b9 01       	movw	r22, r18
 138:	02 c0       	rjmp	.+4      	; 0x13e <PORT_Init+0xb4>
 13a:	66 0f       	add	r22, r22
 13c:	77 1f       	adc	r23, r23
 13e:	8a 95       	dec	r24
 140:	e2 f7       	brpl	.-8      	; 0x13a <PORT_Init+0xb0>
 142:	cb 01       	movw	r24, r22
 144:	80 95       	com	r24
 146:	84 23       	and	r24, r20
 148:	8a bb       	out	0x1a, r24	; 26
				break;
 14a:	08 95       	ret
				
				case PORTBb:
				CLR_BIT(DDRB, PIN);
 14c:	47 b3       	in	r20, 0x17	; 23
 14e:	21 e0       	ldi	r18, 0x01	; 1
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	b9 01       	movw	r22, r18
 154:	02 c0       	rjmp	.+4      	; 0x15a <PORT_Init+0xd0>
 156:	66 0f       	add	r22, r22
 158:	77 1f       	adc	r23, r23
 15a:	8a 95       	dec	r24
 15c:	e2 f7       	brpl	.-8      	; 0x156 <PORT_Init+0xcc>
 15e:	cb 01       	movw	r24, r22
 160:	80 95       	com	r24
 162:	84 23       	and	r24, r20
 164:	87 bb       	out	0x17, r24	; 23
				break;
 166:	08 95       	ret
				
				case PORTCc:
				CLR_BIT(DDRC, PIN);
 168:	44 b3       	in	r20, 0x14	; 20
 16a:	21 e0       	ldi	r18, 0x01	; 1
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	b9 01       	movw	r22, r18
 170:	02 c0       	rjmp	.+4      	; 0x176 <PORT_Init+0xec>
 172:	66 0f       	add	r22, r22
 174:	77 1f       	adc	r23, r23
 176:	8a 95       	dec	r24
 178:	e2 f7       	brpl	.-8      	; 0x172 <PORT_Init+0xe8>
 17a:	cb 01       	movw	r24, r22
 17c:	80 95       	com	r24
 17e:	84 23       	and	r24, r20
 180:	84 bb       	out	0x14, r24	; 20
				break;
 182:	08 95       	ret
				case PORTDd:
				CLR_BIT(DDRD, PIN);
 184:	41 b3       	in	r20, 0x11	; 17
 186:	21 e0       	ldi	r18, 0x01	; 1
 188:	30 e0       	ldi	r19, 0x00	; 0
 18a:	b9 01       	movw	r22, r18
 18c:	02 c0       	rjmp	.+4      	; 0x192 <PORT_Init+0x108>
 18e:	66 0f       	add	r22, r22
 190:	77 1f       	adc	r23, r23
 192:	8a 95       	dec	r24
 194:	e2 f7       	brpl	.-8      	; 0x18e <PORT_Init+0x104>
 196:	cb 01       	movw	r24, r22
 198:	80 95       	com	r24
 19a:	84 23       	and	r24, r20
 19c:	81 bb       	out	0x11, r24	; 17
 19e:	08 95       	ret

000001a0 <_exit>:
 1a0:	f8 94       	cli

000001a2 <__stop_program>:
 1a2:	ff cf       	rjmp	.-2      	; 0x1a2 <__stop_program>
